---
# This file handles installing Gitea using the official binary release.
# This includes
# * installing dependencies using the package manager
# * getting the latest version
# * downloading the binary
# * validating the signature
# * installing the binary to the correct path
# * creating the necessary system user account
# * installing a systemd service file/OpenRC init script

- name: 'Install dependencies'
  ansible.builtin.package:
    name: "{{ gitea_dependencies }}"
    state: present

- name: 'Determine Gitea version to install'
  when: "gitea_version is not defined"
  block:

    - name: 'Get available versions of Gitea'
      ansible.builtin.uri:
        url: "{{ gitea_base_url }}"
        return_content: true
      register: _gitea_downloads
      check_mode: false

    - name: 'Determine latest version of Gitea'
      ansible.builtin.set_fact:
        gitea_version: "{{ _gitea_downloads.content | regex_findall('(?<=/gitea/)[0-9]+\\.[0-9]+\\.[0-9]+') | community.general.version_sort | last }}"

- name: 'Get currently installed version of Gitea'
  ansible.builtin.command: '/usr/local/bin/gitea --version'
  check_mode: false
  changed_when: false
  ignore_errors: true
  register: _gitea_version

- name: 'Determine version number'
  ansible.builtin.set_fact:
    _current_gitea_version: "{{ _gitea_version.stdout | default('') | ansible.builtin.regex_search('(?<=Gitea version )[0-9.]+(-rc[0-9]+)?(?= )') }}"

- name: "Download and install Gitea {{ gitea_version }}"
  when: "gitea_version != _current_gitea_version"
  block:

    - name: 'Create temporary directory'
      ansible.builtin.tempfile:
        state: directory
      diff: false
      register: _tmpdir
      notify: gitea_remove_tmpdir

    - name: 'Determine file name'
      ansible.builtin.set_fact:
        _filename: "gitea-{{ gitea_version }}-linux-{{ gitea_arch }}"

    - name: 'Download Gitea'
      ansible.builtin.get_url:
        url: "{{ gitea_base_url | ansible.builtin.regex_replace('/*$', '') }}/{{ gitea_version }}/{{ filename }}"
        dest: "{{ _tmpdir.path }}"
        mode: '0755'
      loop:
        - "{{ _filename }}"
        - "{{ _filename }}.asc"
      loop_control:
        loop_var: filename
      when: "_tmpdir is not skipped"

    - name: 'Create temporary GnuPG directory'
      ansible.builtin.file:
        path: "{{ _tmpdir.path }}/.gnupg"
        state: directory
        owner: root
        group: root
        mode: '0700'
      diff: false
      when: "_tmpdir is not skipped"

    - name: 'Get the PGP keys'
      ansible.builtin.command: "gpg --keyserver hkps://keys.openpgp.org --no-default-keyring --keyring trustedkeys.kbx --recv-key {{ gitea_pgp_fingerprint | ansible.builtin.quote }}"
      environment:
        GNUPGHOME: "{{ _tmpdir.path }}/.gnupg"
      register: _gpg_recv_key
      changed_when: "_gpg_recv_key is not failed and 'imported:' in _gpg_recv_key.stderr"
      when: "_tmpdir is not skipped"

    - name: 'Verify signature'
      ansible.builtin.command: "gpgv '{{ _tmpdir.path }}/{{ _filename }}.asc' '{{ _tmpdir.path }}/{{ _filename }}'"
      environment:
        GNUPGHOME: "{{ _tmpdir.path }}/.gnupg"
      changed_when: false
      when: "_tmpdir is not skipped"

    - name: 'Install Gitea'
      ansible.builtin.copy:
        dest: '/usr/local/bin/gitea'
        src: "{{ _tmpdir.path }}/{{ _filename }}"
        remote_src: true
        owner: root
        group: root
        mode: '0755'
      notify: gitea_restart
      when: "_tmpdir is not skipped"

- name: 'Create Gitea system user group'
  ansible.builtin.group:
    name: "{{ gitea_group }}"
    system: true
    state: present

- name: 'Create Gitea system user account'
  ansible.builtin.user:
    name: "{{ gitea_user }}"
    password: '*'
    group: "{{ gitea_group }}"
    home: "{{ gitea_data_path }}"
    comment: 'Gitea service account'
    shell: '/bin/sh'
    system: true
    state: present

- name: 'Check for MariaDB (systemd)'
  ansible.builtin.stat:
    path: '/lib/systemd/system/mariadb.service'
  register: _mariadb_service
  when: "gitea_database_type == 'mysql' and ansible_facts['service_mgr'] == 'systemd'"

- name: 'Check for MariaDB (non-systemd)'
  ansible.builtin.stat:
    path: '/etc/init.d/mariadb'
  register: _initd_mariadb
  when: "gitea_database_type == 'mysql' and ansible_facts['service_mgr'] != 'systemd'"

- name: 'Install systemd service file'
  ansible.builtin.template:
    dest: '/etc/systemd/system/gitea.service'
    src: gitea.service.j2
    owner: root
    group: root
    mode: '0644'
  when: "ansible_facts['service_mgr'] == 'systemd'"

- name: 'Install OpenRC init script'
  ansible.builtin.template:
    dest: '/etc/init.d/gitea'
    src: gitea.openrc.j2
    owner: root
    group: root
    mode: '0755'
  when: "ansible_facts['service_mgr'] == 'openrc'"
